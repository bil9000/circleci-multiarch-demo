version: 2.1

orbs: 
  aws-ecr: circleci/aws-ecr@8.1.2

commands:
  run-pytest:
    description: "Run PyTest"
    parameters:
      requirements-path:
        type: string
      pytest-args:
        type: string
        default: "--verbose"
    steps:
      - checkout
      - run:
          name: Pip Install Testing Requirements
          command: pip install -r << parameters.requirements-path >>
      - run:
          name: Make Directory for Test Results
          command: mkdir test-results
      - run:
          name: Run PyTest Test Suite
          command: pytest << parameters.pytest-args >>
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

  set-build-tools-env:
    description: "Set need environment variables needed for Build Tools"
    steps:
      - checkout
      - run:
          name: Setup Build Tool Environment Variables
          command: |
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            echo "export GIT_BRANCH=${CIRCLE_BRANCH}" >> $BASH_ENV
            if [ -z ${CIRCLE_PULL_REQUEST+x} ]; then echo "export IS_PULL_REQUEST='false'"; else echo "export IS_PULL_REQUEST='true'"; fi  >> $BASH_ENV
            source $BASH_ENV
  
  save-docker-image:
    description: "Saves a Docker image for future Jobs"
    steps:
      - run: mkdir -p /tmp/docker-images/
      - run:
          name: Saving Docker Image
          command: docker save --output /tmp/docker-images/${DOCKER_NAMESPACE}-${DOCKER_IMAGE}-$(docker version -f {{.Server.Arch}})-${VERSION}-${CIRCLE_SHA1}.tar ${DOCKER_NAMESPACE}/${DOCKER_IMAGE}:$(docker version -f {{.Server.Arch}})-${VERSION}-${CIRCLE_SHA1}
      - run: ls -lah /tmp/docker-images/
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker-images/*
      - run: rm -rf /tmp/docker-images/

  load-docker-image:
    description: "Loads a Docker image"
    steps:
      - run: ls -lah /tmp/
      - attach_workspace:
          at: /tmp
      - run: ls -lah /tmp/docker-images/
      - run:
            name: Loading Docker Image
            command: docker load --input /tmp/docker-images/${DOCKER_NAMESPACE}-${DOCKER_IMAGE}-$(docker version -f {{.Server.Arch}})-${VERSION}-${CIRCLE_SHA1}.tar

  testing-docker-image:
    description: "Launches tests against a Docker image"
    steps:
      - checkout
      - run:
          name: Install goss
          command: |
            # rather than give internet scripts SU rights, we install to local user bin and add to path
            export GOSS_DST=~/bin
            export PATH=$PATH:~/bin
            export GOSS_OPTS="--format junit"
            curl -fsSL https://goss.rocks/install | sh
            goss -version
      - run:
          name: Make Directory for Goss Results
          command: mkdir goss-results
      - run:
          name: Run dgoss Test
          command: |
            export GOSS_OPTS="--format junit"
            dgoss run -p 8080:8080 ${DOCKER_NAMESPACE}/${DOCKER_IMAGE}:$(docker version -f {{.Server.Arch}})-${VERSION}-${CIRCLE_SHA1}  > ./goss-results/report.xml
      - store_test_results:
          path: goss-results
      - store_artifacts:
          path: goss-results

  build:
    description: "Build Docker image via Build Tools"
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: ./.ci/build.sh -f Dockerfile --image ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} --build-args "VERSION=${VERSION} CIRCLE_BUILD_URL=${CIRCLE_BUILD_URL} CIRCLE_SHA1=${CIRCLE_SHA1} CIRCLE_USERNAME=${CIRCLE_USERNAME} CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM}"

  push:
    description: "Pushes Docker Image to DockerHub via Build Tools"
    steps:
      - checkout
      - run:
          name: Push Image
          command: ./.ci/push.sh --image ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}

  tagging:
    description: "Add tags to Docker Image"
    steps:
      - checkout
      - run:
          name: Tag Image
          command: ./.ci/tag-image.sh --image ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} --tags "${CIRCLE_SHA1} ${VERSION} latest"

  docker-enable-experimental:
    description: "Enable Experimental Features in Docker"
    steps:
      - checkout
      - run:
          name: Enable Experimental
          command: ./.ci/enable-experimental.sh

  manifests:
    description: "Make and Push Manifests for Docker"
    steps:
      - checkout
      - run:
          name: Make Manifests
          command: |
            ./.ci/manifest.sh --image ${DOCKER_IMAGE} --manifest ${VERSION}-${CIRCLE_SHA1} --push
            ./.ci/manifest.sh --image ${DOCKER_IMAGE} --manifest ${CIRCLE_SHA1} --push
            ./.ci/manifest.sh --image ${DOCKER_IMAGE} --manifest ${VERSION} --push
            ./.ci/manifest.sh --image ${DOCKER_IMAGE} --manifest latest --push

  deployment:
    description: "Deploy Multi-Arch Containers"
    steps:
      - run:
          name: Stop All Containers
          command: docker rm -f $(docker ps -a -q) || echo "No Running Containers"
      - run:
          name: Remove All Containers
          command: docker rmi -f $(docker images -q) || echo "No Images to Remove"
      - run:
          name: Pull Multi-Arch Container
          command: docker pull ${DOCKER_NAMESPACE}/${DOCKER_IMAGE}:${VERSION}
      - run:
          name: Run Multi-Arch Container
          command: docker run -d -p 80:8080 ${DOCKER_NAMESPACE}/${DOCKER_IMAGE}:${VERSION}


executors:
  browsers-python:
    docker:
      - image: circleci/python:3.9-browsers

  arm64:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    resource_class: arm.medium

  amd64:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    resource_class: medium

  amd64-deployment:
    machine: true
    resource_class: crowley-namespace/multi-arch-amd64 

  arm64-deployment:
    machine: true
    resource_class: crowley-namespace/multi-arch-arm64 

jobs:
  test-demo:
    executor: browsers-python
    steps:
      - run-pytest:
          requirements-path: "./demo/requirements/testing.txt"
          pytest-args: "--live-server-port 8080 --verbose --junitxml=test-results/junit.xml"

  scan-image:
    parameters:
      architecture:
        type: executor
    executor: << parameters.architecture >>
    steps:
      - set-build-tools-env
      - load-docker-image
      - snyk/scan:
          docker-image-name: ${DOCKER_NAMESPACE}/${DOCKER_IMAGE}:${ARCH}-${VERSION}-${CIRCLE_SHA1}
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo
      DOCKER_NAMESPACE: jimcrowley
      ARCH: amd64
      
  build-image:
    parameters:
      architecture:
        type: executor
    executor: << parameters.architecture >>
    steps:
      - set-build-tools-env
      - build
      - save-docker-image
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo
      DOCKER_NAMESPACE: jimcrowley
      RELEASE_BRANCH: main

  test-image:
    parameters:
      architecture:
        type: executor
    executor: << parameters.architecture >>
    steps:
      - set-build-tools-env
      - load-docker-image
      - testing-docker-image
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo
      DOCKER_NAMESPACE: jimcrowley
      GOSS_SLEEP: 10

  push-image:
    parameters:
      architecture:
        type: executor
    executor: << parameters.architecture >>
    steps:
      - set-build-tools-env
      - load-docker-image
      - push
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo
      DOCKER_NAMESPACE: jimcrowley
      RELEASE_BRANCH: main

  tagging-image:
    executor: amd64
    steps:
      - set-build-tools-env
      - tagging
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo
      DOCKER_NAMESPACE: jimcrowley
      RELEASE_BRANCH: main
      SUPPORTED_ARCHITECTURES: "amd64 arm64 ppc64le s390x"

  make-manifests:
    executor: amd64
    steps:
      - set-build-tools-env
      - docker-enable-experimental
      - manifests
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo
      DOCKER_NAMESPACE: jimcrowley
      RELEASE_BRANCH: main
      SUPPORTED_ARCHITECTURES: "amd64 arm64"

  deploy-container:
    parameters:
      architecture:
        type: executor
    executor: << parameters.architecture >>
    steps:
      - set-build-tools-env
      - deployment
    environment:
      DOCKER_IMAGE: multi-arch-circleci-demo
      DOCKER_NAMESPACE: jimcrowley


workflows:
  demo:
    jobs:
      - build-image:
          name: "Building << matrix.architecture >> Image"
          matrix:
            parameters:
              architecture: ["arm64", "amd64"]
      - test-image:
          name: "Testing << matrix.architecture >> Image"
          matrix:
            parameters:
              architecture: ["arm64", "amd64"]
          requires:
            - "Building << matrix.architecture >> Image"
      - push-image:
          name: "Pushing << matrix.architecture >> Image"
          matrix:
            parameters:
              architecture: ["arm64", "amd64"]
          requires:
            - Testing << matrix.architecture >> Image
<<<<<<< Updated upstream
      - push-image:
          name: "Pushing << matrix.architecture >> Image"
          matrix:
            parameters:
              architecture: ["ppc64le", "s390x"]
          requires:
            - "Building << matrix.architecture >> Image"
=======
            - "Testing Python Code"
>>>>>>> Stashed changes
      - tagging-image:
          name: "Tagging Images"
          requires:
            - "Pushing arm64 Image"
            - "Pushing amd64 Image"
      - make-manifests:
          name: "Making and Push Manifests"
          requires:
            - "Tagging Images"
      - deploy-container:
          name: "Deploying Multi-Arch Container on << matrix.architecture >>"
          matrix:
            parameters:
<<<<<<< Updated upstream
              architecture: ["s390x", "amd64-deployment", "arm64-deployment"]
=======
              architecture: ["amd64-deployment", "arm64-deployment"]
          requires:
            - "Approval Needed for Deployment"
>>>>>>> Stashed changes
